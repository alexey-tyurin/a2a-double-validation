#!/bin/bash
# Script to deploy all agents to Google Cloud Run

# Exit immediately if a command exits with a non-zero status
set -e

# Default values
PROJECT_ID=""
REGION="us-central1"
ENV_FILE=".env.cloud"

# Function to show usage
function show_usage {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -p, --project   Google Cloud Project ID (required)"
  echo "  -r, --region    Google Cloud Region (default: us-central1)"
  echo "  -e, --env-file  Environment file to use (default: .env.cloud)"
  echo "  -h, --help      Show this help message"
  exit 1
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -p|--project)
      PROJECT_ID="$2"
      shift
      shift
      ;;
    -r|--region)
      REGION="$2"
      shift
      shift
      ;;
    -e|--env-file)
      ENV_FILE="$2"
      shift
      shift
      ;;
    -h|--help)
      show_usage
      ;;
    *)
      echo "Unknown option: $1"
      show_usage
      ;;
  esac
done

# Check if required arguments are provided
if [[ -z "$PROJECT_ID" ]]; then
  echo "Error: Google Cloud Project ID is required"
  show_usage
fi

# Check if env file exists
if [[ ! -f "$ENV_FILE" ]]; then
  echo "Environment file $ENV_FILE not found. Creating from env.sample..."
  cp env.sample "$ENV_FILE"
  echo "Please edit $ENV_FILE with your actual API keys and credentials before continuing."
  exit 1
fi

# Confirm deployment
echo "This script will deploy 4 agents to Google Cloud Run in project: $PROJECT_ID"
echo "Region: $REGION"
echo "Environment file: $ENV_FILE"
read -p "Do you want to continue? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  echo "Deployment canceled"
  exit 1
fi

# Ensure gcloud is configured with the right project
echo "Setting Google Cloud project to $PROJECT_ID"
gcloud config set project "$PROJECT_ID"

# Function to deploy an agent
function deploy_agent {
  local agent_name="$1"
  local dockerfile="$2"
  local port="$3"
  local memory="$4"
  local cpu="$5"
  local service_name="a2a-$agent_name-agent"
  local image_name="gcr.io/$PROJECT_ID/$service_name"
  
  echo "===================================================="
  echo "Deploying $agent_name Agent to Cloud Run"
  echo "===================================================="
  
  # Build container image
  echo "Building Docker image: $image_name"
  docker build -t "$image_name" -f "$dockerfile" .
  
  # Push to Google Container Registry
  echo "Pushing image to Google Container Registry"
  docker push "$image_name"
  
  # Read environment variables from file
  env_vars="--set-env-vars=DEPLOYMENT_ENV=cloud,HOST=0.0.0.0"
  while IFS='=' read -r key value || [[ -n "$key" ]]; do
    # Skip comments and empty lines
    if [[ "$key" =~ ^#.*$ ]] || [[ -z "$key" ]]; then
      continue
    fi
    # Add env var
    env_vars="$env_vars,${key}=${value}"
  done < "$ENV_FILE"
  
  # Deploy to Cloud Run
  echo "Deploying service to Cloud Run"
  gcloud run deploy "$service_name" \
    --image "$image_name" \
    --platform managed \
    --region "$REGION" \
    --port "$port" \
    --memory "$memory" \
    --cpu "$cpu" \
    --allow-unauthenticated \
    --min-instances 1 \
    --max-instances 1 \
#    --max-instances 3 \
    $env_vars
  
  # Get the service URL
  service_url=$(gcloud run services describe "$service_name" --platform managed --region "$REGION" --format='value(status.url)')
  echo "$agent_name Agent deployed at: $service_url"
  echo "$service_url" > "url_$agent_name.txt"
}

# Deploy each agent
deploy_agent "manager" "Dockerfile.manager" 9001 "1Gi" "1" 
deploy_agent "safeguard" "Dockerfile.safeguard" 8002 "2Gi" "2"
deploy_agent "processor" "Dockerfile.processor" 8003 "2Gi" "2"
deploy_agent "critic" "Dockerfile.critic" 8004 "1Gi" "1"

echo "===================================================="
echo "All agents deployed successfully!"
echo "===================================================="

# Generate configuration for user_client.py
cat > cloud_config.py << EOL
# Cloud Run Configuration
# Generated by deploy_to_cloud_run.sh

MANAGER_URL = "$(cat url_manager.txt)/api/query"
SAFEGUARD_URL = "$(cat url_safeguard.txt)"
PROCESSOR_URL = "$(cat url_processor.txt)"
CRITIC_URL = "$(cat url_critic.txt)"
EOL

echo "Configuration for user_client.py has been generated in cloud_config.py"
echo "Use the cloud client with: python user_client_cloud.py" 